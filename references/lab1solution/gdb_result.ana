---------------------------------------------------------------------------------------
NOTES:
	1) Script ./get-asm.sh get assembly codes of running qemu.
	2) Txt file ./gdb_result.txt is the output of ./get-asm.sh. It contains 
	   assembly codes of boot.s and main.c with registers' info printed.
	3) Script ./ana_result.sh analyses ./gdb_result.txt. ./ana_result.txt is its
	   outputing result.
---------------------------------------------------------------------------------------

1) readsect() and readseg()
	a) The critical assembly code of readsec() is 
           "0x7ccd:	repnz insl (%dx),%es:(%edi)".

	   [gdb_result.txt]	It is from line 1853 to line 437988.
 	                        Total number lines: 17280


	   [ana_result.txt]     Total lines: 17280
				Total "-17": 17146
				Total "-1071": 132
				Total "-1581": 1 (  8448  214608  -17
                                                    8449  216189  -1581 )
				

	   			128 "17" is grouped together. 512/4=128. So calling 
                                readsect() results calling 128 times of "repnz".

				1071/17=63, 63 instructions during two "repnz".
				1581/17=93

				readseg() starts from 0x7cd2.
				readsect() starts from 0x7c81.
				waitdisk() starts from 0x7c6c.
				
				the end of main.c jump to 0x10000c. 
				( 438821  (gdb) => 0x7d73:        call   *%eax
				$eax = 0x10000c )

				call readseg() for 4 times.	`
			
	b) elf header
	---------------------------------------------------------------------------------------------------------------------------
			MEMORY INFO			| 		COMMENTS (reference elf.pdf p18-20)
	---------------------------------------------------------------------------------------------------------------------------
	   (gdb) x/28h  0x10000				|
	   0x457f	0x464c(2, e_magic)		|
	   0x0101	0x0001	0x0000	0x0000		|
	   0x0000	0x0000 (6, e_elf)		|
	   0x0002(1, e_type) 				| executable file	
	   0x0003(1, e_machine)				| intel architecture
	   0x0001	0x0000(2, e_version)		| current version
	   0x000c	0xf010(2, e_entry)		| gives the virtual address to which the system first transfers control
	   0x0034	0x0000(2, e_phoff)		| holds the program header table's file offset in bytes
	   0x1398	0x0001(2, e_shoff)		| holds the section header table's file offset in bytes
	   0x0000	0x0000(2, e_flags)		| holds processor-specific flags associated with the file
	   0x0034(1, e_hsize)				| holds the ELF header's size in bytes
	   0x0020(1, e_pentsize)			| holds the size in bytes of one entry in the file's program header table
	   0x0003(1, e_phnum)				| holds the number of entries in the program header table
	   0x0028					|
	   0x000b	0x0008				|
	--------------------------------------------------------------------------------------------------------------------------
	(gdb) x/48h 0x10034
0x10034:	0x0001	0x0000	0x1000	0x0000	0x0000	0xf010	0x0000	0xf010
0x10044:	0x7283	0x0000	0x7283	0x0000	0x0005	0x0000	0x1000	0x0000
0x10054:	0x0001	0x0000	0x9000	0x0000	0x8000	0xf010	0x8000	0xf010
0x10064:	0x8320	0x0000	0x8980	0x0000	0x0006	0x0000	0x1000	0x0000
0x10074:	0xe551	0x6474	0x0000	0x0000	0x0000	0x0000	0x0000	0x0000
0x10084:	0x0000	0x0000	0x0000	0x0000	0x0007	0x0000	0x0004	0x0000

------------------------------------------------------------------------------------
    code seg		    data seg		   stack seg        
-------------------------------------------------------------------------------------
0x0001	0x0000		0x0001	0x0000		0xe551	0x6474		(p_type)
0x1000	0x0000		0x9000	0x0000		0x0000	0x0000		(p_offset)
0x0000	0xf010		0x8000	0xf010		0x0000	0x0000		(p_va)
0x0000	0xf010		0x8000	0xf010		0x0000	0x0000		(p_pa)
0x7283	0x0000		0x8320	0x0000		0x0000	0x0000		(p_filesz)
0x7283	0x0000		0x8980	0x0000		0x0000	0x0000		(p_memsz)
0x0005	0x0000		0x0006	0x0000		0x0007	0x0000		(p_flags)
0x1000	0x0000		0x1000	0x0000		0x0004	0x0000		(p_align)
--------------------------------------------------------------------------------------------------------------------------
[root@sollab-206 lab]# objdump -p obj/kern/kernel

obj/kern/kernel:     file format elf32-i386

Program Header:
    LOAD off    0x00001000 vaddr 0xf0100000 paddr 0xf0100000 align 2**12
         filesz 0x00007283 memsz 0x00007283 flags r-x(101)
    LOAD off    0x00009000 vaddr 0xf0108000 paddr 0xf0108000 align 2**12
         filesz 0x00008320 memsz 0x00008980 flags rw-(110)
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**2
         filesz 0x00000000 memsz 0x00000000 flags rwx(111)
--------------------------------------------------------------------------------------------------------------------------

insl: 	%sce, count
	%edx, port
	%edi, memory addr

steps of xv6 bootmain.c
	1) load elf head file to memory(0x10000)
	2) according to information from elf head file, load data segment, code segment and stack segment to memory(0x100000).
	3) transfer control

how to read a section?
	1) limitation
		512 bytes
	2) steps
		--> round down start_va to section bound
		--> start to read untill end_va, 32 bits each time

virtual disk of kernel
	--> elf header
		--> magic word
		--> number of program segment
		--> start address of program segment header
		--> start address of execution
	--> each program segment header
		--> where to read
		--> how many bytes
		--> where to load
		--> how much memory to allocate
	--> each program



	c) exercise 6
	   [TRY 01] set addresse as 0x7c02(a even address) in boot/Makefrag
	---------------------------------------------------------------
		(gdb) b *0x7c00
		Breakpoint 1 at 0x7c00
		(gdb) c
		Continuing.
		[   0:7c00] => 0x7c00:	nop
		Breakpoint 1, 0x00007c00 in ?? ()
		(gdb) si
		[   0:7c01] => 0x7c01:	nop
		0x00007c01 in ?? ()
		(gdb) 
		[   0:7c02] => 0x7c02:	cli    
		0x00007c02 in ?? ()
		(gdb) 
		[   0:7c03] => 0x7c03:	cld    
		0x00007c03 in ?? ()
		(gdb) 
		[   0:7c04] => 0x7c04:	xor    %ax,%ax
	----------------------------------------------------------------
		qemu can't load kernel

	   [TRY 02] set addresse as 0x7c01(an odd address) in boot/Makefrag
	----------------------------------------------------------------
		(gdb) b *0x7c00
		Breakpoint 1 at 0x7c00
		(gdb) c
		Continuing.
		[   0:7c00] => 0x7c00:	nop
		Breakpoint 1, 0x00007c00 in ?? ()
		(gdb) si
		[   0:7c01] => 0x7c01:	nop
		0x00007c01 in ?? ()
		(gdb) 
		[   0:7c02] => 0x7c02:	nop
		0x00007c02 in ?? ()
		(gdb) 
		[   0:7c03] => 0x7c03:	cli    
		0x00007c03 in ?? ()
		(gdb) 
		[   0:7c04] => 0x7c04:	cld
	----------------------------------------------------------------
	      qemu can't boot 

	


2) segments analyse | protection mode
	[   0:7c1e] => 0x7c1e:	lgdtw  0x7c64   	| GDT 基地址
	0x00007c1e in ?? ()				|
	(gdb) x/2h 0x7c64				|
	0x7c64:	0x0017	0x7c4c				| size of segment: 0x17+1=24d
	(gdb) x/12h 0x7c4c				|
	0x7c4c:	0x0000	0x0000	0x0000	0x0000		| null seg
		0xffff	0x0000	0x9a00	0x00cf		| code seg
	0x7c5c:	0xffff	0x0000	0x9200	0x00cf		| data seg

	 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0	
	+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
	|        Base 31:24     | G|DB| L| A|SLim 19:16 | P| DPL | S|   Type    |      Bse 23:16        | 
	+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
	|             Base Address 15:00                |             Segment Limit 15:00               |
	+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
	 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0	
	+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
	|        0x00           | 1| 1| 0| 1|  0xf      | 1|  0  | 1| 1  0  1  0|        0x0            | 
	+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
	|                 0x0000                        |               0xffff                          |
	+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
	code segment: s=1, type.0=1, type.C=0(), type.r=1(readable), type.a=0
	base addr: 0x00000000
        addr limit check: limit=0xfffff, g=1, addr_limit=0x00000000~0xffffffff
	privelege check: dpl=0
	b=1(32 bits segment)
	l=0(32-bit code segment)
	 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0	
	+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
	|        0x00           | 1| 1| 0| 1|  0xf      | 1|  0  | 1| 0  0  1  0|        0x0            | 
	+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
	|                 0x0000                        |               0xffff                          |
	+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
	

	[   0:7c2d] => 0x7c2d:	ljmp   $0x8,$0x7c32
	0x00007c2d in ?? ()
	1: /x $cs = 0x0
	(gdb) 
	The target architecture is assumed to be i386
	=> 0x7c32:	mov    $0x10,%ax
	0x00007c32 in ?? ()
	1: /x $cs = 0x8

	 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0	
	+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
	|          Index                       | T| RPL |
	+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
	

 _______
|boot.S |
------------------------------------------------------------------------
#include <inc/mmu.h>							|
									|
.set PROT_MODE_CSEG, 0x8                             			| index=1, t=0, rpl=0
.set PROT_MODE_DSEG, 0x10                  				| index=2, t=0, rpl=0
.set CR0_PE_ON,      0x1                   				|
	                                   				|
.globl start                               				|
start:                                     				|
  .code16                     # Assemble for 16-bit mode		|
  cli                         # Disable interrupts			|
  cld                         # String operations increment		|
									|
  # Set up the important data segment registers (DS, ES, SS).		| point those register to null segment pointer in GDT 
  xorw    %ax,%ax             # Segment number zero			|
  movw    %ax,%ds             # -> Data Segment				|
  movw    %ax,%es             # -> Extra Segment			|
  movw    %ax,%ss             # -> Stack Segment			|
									|
  # Enable A20:								|
  #   For backwards compatibility with the earliest PCs, physical	|
  #   address line 20 is tied low, so that addresses higher than	|
									|
  #   1MB wrap around to zero by default.  This code undoes this.	|
seta20.1:								|
  inb     $0x64,%al               # Wait for not busy			|
  testb   $0x2,%al							|
  jnz     seta20.1							|
									|
  movb    $0xd1,%al               # 0xd1 -> port 0x64			|
  outb    %al,$0x64							|
									|
seta20.2:								|
  inb     $0x64,%al               # Wait for not busy			|
  testb   $0x2,%al					            	|
  jnz     seta20.2							|
									|
  movb    $0xdf,%al               # 0xdf -> port 0x60			|
  outb    %al,$0x60							|
									|
  # Switch from real to protected mode, using a bootstrap GDT		|
  # and segment translation that makes virtual addresses 		|
  # identical to their physical addresses, so that the 			|
  # effective memory map does not change during the switch.		|
  lgdt    gdtdesc							|
  movl    %cr0, %eax							|
  orl     $CR0_PE_ON, %eax						|
  movl    %eax, %cr0							|
  									|
  # Jump to next instruction, but in 32-bit code segment.		|
  # Switches processor into 32-bit mode.				|
  ljmp    $PROT_MODE_CSEG, $protcseg                 			| ljmp load code segment selector to register automatically?
									|
  .code32                     # Assemble for 32-bit mode		|
protcseg:								|
  # Set up the protected-mode data segment registers			| why set for all?
  movw    $PROT_MODE_DSEG, %ax    # Our data segment selector		|
  movw    %ax, %ds                # -> DS: Data Segment			|
  movw    %ax, %es                # -> ES: Extra Segment		|
  movw    %ax, %fs                # -> FS				|
  movw    %ax, %gs                # -> GS				|
  movw    %ax, %ss                # -> SS: Stack Segment		|
  									|
  # Set up the stack pointer and call into C.				|
  movl    $start, %esp							|
  call bootmain								|
									|
  # If bootmain returns (it shouldn't), loop.				|
spin:									|
  jmp spin								|
									|
# Bootstrap GDT								|
.p2align 2                                # force 4 byte alignment	|
gdt:									|
  SEG_NULL				# null seg			|
  SEG(STA_X|STA_R, 0x0, 0xffffffff)	# code seg			|
  SEG(STA_W, 0x0, 0xffffffff)	        # data seg			|
									|
/*									|
#define STA_X		0x8	    // Executable segment		|
#define STA_R		0x2	    // Readable (executable segments)	|
#define STA_W		0x2	 // Writeable (non-executable segments)	|						
#define SEG(type,base,lim)						| the limitation of this function:
	.word (((lim) >> 12) & 0xffff), ((base) & 0xffff);		| 	1) assume the granurality flag is set
	.byte (((base) >> 16) & 0xff), (0x90 | (type)),			|	2) 
		(0xC0 | (((lim) >> 28) & 0xf)), (((base) >> 24) & 0xff)	|
*/									|
									|
gdtdesc:								|
  .word   0x17                            # sizeof(gdt) - 1		|
  .long   gdt                             # address gdt			|
------------------------------------------------------------------------

protection tactics:	a) the protection areal is within the OS 
			b) protect codes and data from violated by instructions

protection mechanism:	a) put codes and datas in various segments which are consistent memory
			b) check before accessing them
			c) more details:
				i)   set a segments description table in memory
				ii)  laod the segment description point into a segment register
				iii) visit the register to get segment description
				iv)  extract limitations
				v)   check something according to the limitations
					type checking			(which bank)
					privilege checking		(only provide service for VIPs)
					address limitation checking	(finance limitaion)

					* privilege checking while accessing a data segment
						( CPL <= DPL ) && ( RPL <= DPL )
					* privilege checking while loading the SS register
						( CPL == DPL ) && ( CPL == RPL )

logical address to physical address:
	a) set DT
	   get base address
	   base + offset
	b) provide more functions at the price of consumption of memory space and cpu, but the price is worth



+------------------+  <- 0xFFFFFFFF (4GB)
|      32-bit      |
|  memory mapped   |
|     devices      |
|                  |
/\/\/\/\/\/\/\/\/\/\

/\/\/\/\/\/\/\/\/\/\
|                  |
|      Unused      |
|                  |
+------------------+  <- depends on amount of RAM
|                  |
|                  |
| Extended Memory  |
|                  |
|                  |
+------------------+  <- 0x00100000 (1MB)
|     BIOS ROM     |
+------------------+  <- 0x000F0000 (960KB)
|  16-bit devices, |
|  expansion ROMs  |
+------------------+  <- 0x000C0000 (768KB)
|   VGA Display    |
+------------------+  <- 0x000A0000 (640KB)
|                  |
|    Low Memory    |
|                  |
+------------------+  <- 0x00000000

	
3)boot loader link address, exercise 6
	* By defrault, bios load boot programs from 0x7c00.
	* A memory address point to a byte(8 bits).
	* The boot program address is defined in boot/Makefrag. I call it "defined_boot_start_address".
	* While the boot program is compiled, the start address should be an address which is like
	  0x7c00, 0x7c04, 0x7c08 and so on. I call it "legal address"
	* When the "defined_boot_start_address" is not equal to a "legal_address", compiler make
	  it up with NOP at the start, in order to put the first instruction of boot at a "legal_address".
	  For example, "defined_boot_start_address" is 0x7c02, "legal_address" would be 0x7c04. Compared 
	  with compilation result with 0x7c00 as "defined_boot_start_address", the address of each 
          instrction in boot.asm in condition of defining 0x7c02 as boot start address would be moved to
          the forth address. 
	* However, bios load it start from 0x7c00, not "defined_boot_start_address". So the making-up
	  NOP can't make the difference of address between 0x7c00 and "defined_boot_start_address".
	   
	 
________					
|0x7c02|
------------------------------------------------------------------------
[   0:7c2f] => 0x7c2f:	ljmp   $0x8,$0x7c36	
0x00007c2f in ?? ()
(gdb) 
[f000:e05b]    0xfe05b:	xor    %ax,%ax

(gdb) x/4x 0x7c36
0x7c36:	0x0010	0xd88e	0xc08e	0xe08e
(gdb) x/4x 0x7c34
0x7c34:	0x0010b866	0xc08ed88e	0xe88ee08e	0x04bcd08e
(gdb) x/4i 0x7c34
   0x7c34:	mov    $0xd88e0010,%eax
   0x7c3a:	mov    %ax,%es
   0x7c3c:	mov    %ax,%fs
   0x7c3e:	mov    %ax,%gs
(gdb) x/4i 0x7c35
   0x7c35:	mov    $0x10,%ax
   0x7c38:	mov    %ax,%ds
   0x7c3a:	mov    %ax,%es
   0x7c3c:	mov    %ax,%fs
gdb) x/4x 0x7c35
0x7c35:	0x8e0010b8	0x8ec08ed8	0x8ee88ee0	0x7c04bcd0

FROM obj/boot/boot.asm:
     3  00007c02 <start-0x2>:
     4      7c02:       90                      nop
     5      7c03:       90                      nop
       
     6  00007c04 <start>:
     7  .set CR0_PE_ON,      0x1         # protected mode enable flag
       
     8  .globl start
     9  start:
    10    .code16                     # Assemble for 16-bit mode
    11    cli                         # Disable interrupts
    12      7c04:       fa                      cli    
    13    cld                         # String operations increment
    14      7c05:       fc                      cld    
----------------------------------------------------------------------------

________
|0x7c00|
------------------------------------------------------------------------------
[   0:7c2d] => 0x7c2d:	ljmp   $0x8,$0x7c32
0x00007c2d in ?? ()
(gdb) 
The target architecture is assumed to be i386
=> 0x7c32:	mov    $0x10,%ax

(gdb) x/4x 0x7c32
0x7c32:	0x0010b866	0xc08ed88e	0xe88ee08e	0x00bcd08e
(gdb) x/4i 0x7c32
   0x7c32:	mov    $0x10,%ax
   0x7c36:	mov    %eax,%ds
=> 0x7c38:	mov    %eax,%es
   0x7c3a:	mov    %eax,%fs

FROM obj/boot/boot.asm:
     3  00007c00 <start>:
     4  .set CR0_PE_ON,      0x1         # protected mode enable flag
       
     5  .globl start
     6  start:
     7    .code16                     # Assemble for 16-bit mode
     8    cli                         # Disable interrupts
     9      7c00:       fa                      cli    
    10    cld                         # String operations increment
    11      7c01:       fc                      cld 
-----------------------------------------------------------------------


[root@sollab-206 kern]# objdump -x console.o | grep intr
0000002e l     F .text	0000003d cons_intr
00000352 g     F .text	0000001b serial_intr
0000036d g     F .text	00000012 kbd_intr
00000386 R_386_PC32        serial_intr
0000038b R_386_PC32        kbd_intr
00000968 R_386_32          serial_intr
000009a4 R_386_32          kbd_intr
[root@sollab-206 kern]# grep int kernel.sym
f01001ce t cons_intr
f01004f2 T serial_intr
f010050d T kbd_intr
[root@sollab-206 kern]# cat kernel.asm | grep f01001ce
f01001ce <cons_intr>:
f01001ce:	55                   	push   %ebp
f0100506:	e8 c3 fc ff ff       	call   f01001ce <cons_intr>
f0100518:	e8 b1 fc ff ff       	call   f01001ce <cons_intr>
[root@sollab-206 kern]# nl kernel.asm | grep f01001ce
   268	f01001ce <cons_intr>:
   274	f01001ce:	55                   	push   %ebp
   725	f0100506:	e8 c3 fc ff ff       	call   f01001ce <cons_intr>
   740	f0100518:	e8 b1 fc ff ff       	call   f01001ce <cons_intr>
[root@sollab-206 kern]# nl kernel.asm | grep f01004f2
   711	f01004f2 <serial_intr>:
   717	f01004f2:	55                   	push   %ebp
   758	f0100525:	e8 c8 ff ff ff       	call   f01004f2 <serial_intr>
[root@sollab-206 kern]# nl kernel.asm | grep f010050d
   729	f010050d <kbd_intr>:
   735	f010050d:	55                   	push   %ebp
   760	f010052a:	e8 de ff ff ff       	call   f010050d <kbd_intr>


1349  f010092a <cprintf>:




[root@sollab-206 kern]# objdump -t kernel | nl | _start
Command not found. ^C
[root@sollab-206 kern]# objdump -t kernel | nl | grep start
    79	f010000c g       .text	00000000 _start
[root@sollab-206 kern]# objdump -t kernel | nl | grep etext
    78	f01019a5 g       *ABS*	00000000 etext
[root@sollab-206 kern]# objdump -t kernel | nl | grep edata
    65	f0110320 g       *ABS*	00000000 edata
[root@sollab-206 kern]# objdump -t kernel | nl | grep end
    75	f0110980 g       *ABS*	00000000 end

[Exercise 9]
In kernel/entry.S
	mygdt:
		SEG_NULL				# null seg
		SEG(STA_X|STA_R, -KERNBASE, 0xffffffff)	# code seg
		SEG(STA_W, -KERNBASE, 0xffffffff)	# data seg

In boot/boot.S
	gdt:
  		SEG_NULL				# null seg
  		SEG(STA_X|STA_R, 0x0, 0xffffffff)	# code seg
  		SEG(STA_W, 0x0, 0xffffffff)	        # data seg

From obj/kernel/kernel.asm
		movl	$(bootstacktop),%esp
	f0100033:	bc 00 00 11 f0       	mov    $0xf0110000,%esp
		lgdt	RELOC(mygdtdesc)		# load descriptor table
	f0100015:	0f 01 15 18 00 11 00 	lgdtl  0x110018
From kernel/entry.S
	# Set the stack pointer
	movl	$(bootstacktop),%esp

	# now to C code
	call	i386_init
From inc/memlayout.h
	#define KSTKSIZE	(8*PGSIZE)   		// size of a kernel stack
So the kernel's stack start from 0xf0110000, its size is 8 times of the size of a page.


[kernel]
	kernel/entry.S --> kernel/init.C

	set new segment environment --> init memory --> init console --> start monitor console 
	                       

[Exercise 10]
Both in obj/kernel/kernel.asm and Both in obj/kernel/kernel.sym
	f0100040 T test_backtrace

	--> save arguments the called function needs
	--> save bext IP 
		(push next IP automatically)
	--> save formal stack frame start addr 
		(push %ebp)
	--> set new stack frame 
		(mov %esp, %ebp #to keep stack continious)
	--> conserve stack space 
		(sub $0x14, %esp)
	--> load arguments
		


[Symbol Table]

[root@sollab-206 lab]# cat inc/* | grep 'N_SO'
// and compilers.  JOS uses the N_SO, N_SOL, N_FUN, and N_SLINE types.
#define	N_SO		0x64	// main source file name
#define	N_SOL		0x84	// included source file name
[root@sollab-206 lab]# cat inc/* | grep 'N_FUN'
// and compilers.  JOS uses the N_SO, N_SOL, N_FUN, and N_SLINE types.
#define	N_FUN		0x24	// procedure name
[root@sollab-206 lab]# cat inc/* | grep 'N_SLINE'
// and compilers.  JOS uses the N_SO, N_SOL, N_FUN, and N_SLINE types.
#define	N_SLINE		0x44	// text segment line number
[root@sollab-206 lab]# cat inc/* | grep 'N_PSYM'
#define	N_PSYM		0xa0	// parameter variable





(gdb) x/48h  0xf01020f8
0x0001	0x0000	0x0000	0x04d7	0x1957	0x0000
0x0001	0x0000	0x0064	0x0000	0x0000	0xf010
0x0012	0x0000	0x0084	0x0000	0x000c	0xf010
0x0000	0x0000	0x0044	0x002c	0x000c	0xf010
0x0000	0x0000	0x0044	0x002f	0x0015	0xf010
0x0000	0x0000	0x0044	0x0033	0x001c	0xf010
0x0000	0x0000	0x0044	0x0034	0x0021	0xf010	
0x0000	0x0000	0x0044	0x0035	0x0023	0xf010

(gdb) x/148x  0xf01020f8
0x0001	0x0000	0x0000	0x04d7	0x1957	0x0000	
0x0001	0x0000	0x0064	0x0000	0x0000	0xf010	
0x0012	0x0000	0x0084	0x0000	0x000c	0xf010	
0x0000	0x0000	0x0044	0x002c	0x000c	0xf010	
0x0000	0x0000	0x0044	0x002f	0x0015	0xf010	
0x0000	0x0000	0x0044	0x0033	0x001c	0xf010	
0x0000	0x0000	0x0044	0x0034	0x0021	0xf010	
0x0000	0x0000	0x0044	0x0035	0x0023	0xf010	
0x0000	0x0000	0x0044	0x0036	0x0025	0xf010	
0x0000	0x0000	0x0044	0x0037	0x0027	0xf010

0x0000	0x0000	0x0044	0x003d	0x002e	0xf010	
0x0000	0x0000	0x0044	0x0040	0x0033	0xf010	
0x0000	0x0000	0x0044	0x0043	0x0038	0xf010

0x0000	0x0000	0x0044	0x0046	0x003d	0xf010	
0x001f	0x0000	0x0064	0x0002	0x0040	0xf010	
0x002b	0x0000	0x003c	0x0000	0x0000	0x0000	
0x003a	0x0000	0x0080	0x0000	0x0000	0x0000	
0x0064	0x0000	0x0080	0x0000	0x0000	0x0000	
0x007e	0x0000	0x0080	0x0000	0x0000	0x0000	
0x00ad	0x0000	0x0080	0x0000	0x0000	0x0000	
0x00ce	0x0000	0x0080	0x0000	0x0000	0x0000	
0x00f4	0x0000	0x0080	0x0000	0x0000	0x0000	
0x0116	0x0000	0x0080	0x0000	0x0000	0x0000	
0x0141	0x0000	0x0080	0x0000	0x0000	0x0000	
0x0167	0x0000	0x0080	0x0000



				 

		





